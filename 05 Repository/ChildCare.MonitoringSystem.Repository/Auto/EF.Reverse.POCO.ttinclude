<#@ import namespace="System.Collections.Generic" #>
<#
fileManager.StartHeader();
// Copyright (C) Simon Hughes 2012
// v2.34.1
#>
// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = <#= Settings.TargetFrameworkVersion #>
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

<#if (Settings.ElementsToGenerate.HasFlag(Elements.Poco) || Settings.ElementsToGenerate.HasFlag(Elements.PocoConfiguration))
{
    if (Settings.UseDataAnnotations) {#>
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
<#  }
}
#>

namespace <#= Settings.Namespace #>
{
<#
var usingsContext = new List<string>();
var usingsAll = new List<string>();

usingsAll.AddRange(Settings.AdditionalNamespaces.Where(x => !string.IsNullOrEmpty(x)));

if ((Settings.ElementsToGenerate.HasFlag(Elements.PocoConfiguration) ||
     Settings.ElementsToGenerate.HasFlag(Elements.Context) ||
     Settings.ElementsToGenerate.HasFlag(Elements.UnitOfWork)) &&
    (!Settings.ElementsToGenerate.HasFlag(Elements.Poco) && !string.IsNullOrWhiteSpace(Settings.PocoNamespace)))
    usingsAll.Add(Settings.PocoNamespace);

if (Settings.ElementsToGenerate.HasFlag(Elements.PocoConfiguration) &&
    (!Settings.ElementsToGenerate.HasFlag(Elements.Context) && !string.IsNullOrWhiteSpace(Settings.ContextNamespace)))
    usingsAll.Add(Settings.ContextNamespace);

if (Settings.ElementsToGenerate.HasFlag(Elements.Context) &&
    (!Settings.ElementsToGenerate.HasFlag(Elements.UnitOfWork) && !string.IsNullOrWhiteSpace(Settings.UnitOfWorkNamespace)))
    usingsAll.Add(Settings.UnitOfWorkNamespace);

if (Settings.ElementsToGenerate.HasFlag(Elements.Context) &&
    (!Settings.ElementsToGenerate.HasFlag(Elements.PocoConfiguration) && !string.IsNullOrWhiteSpace(Settings.PocoConfigurationNamespace)))
        usingsAll.Add(Settings.PocoConfigurationNamespace);

if (Settings.ElementsToGenerate.HasFlag(Elements.Context))
{
    if (Settings.AddUnitTestingDbContext || Settings.StoredProcs.Any())
    {
        usingsContext.Add("System.Linq");
    }
}
if (!Settings.GenerateSeparateFiles)
{
    usingsAll.AddRange(usingsContext);
}
foreach(var usingStatement in usingsAll.Distinct().OrderBy(x => x)) { #>
    using <#= usingStatement #>;
<# } #>

<# if (Settings.ElementsToGenerate.HasFlag(Elements.UnitOfWork) && !string.IsNullOrWhiteSpace(Settings.DbContextInterfaceName))
{
    fileManager.StartNewFile(Settings.DbContextInterfaceName + Settings.FileExtension);
    if (!Settings.GenerateSeparateFiles)
    { #>
    #region Unit of work

<# }#>
    <# if(Settings.MakeClassesInternal) { #>internal<# } else { #>public<# } #> <# if(Settings.MakeDbContextInterfacePartial) { #>partial <# } #>interface <#=Settings.DbContextInterfaceName #> : <#= Settings.DbContextInterfaceBaseClasses #>
    {
<#
foreach (Table tbl in from t in Settings.Tables.Where(t => !t.IsMapping && t.HasPrimaryKey).OrderBy(x => x.NameHumanCase) select t)
{
#>
        Microsoft.EntityFrameworkCore.DbSet<<#=tbl.NameHumanCaseWithSuffix #>> <#=Inflector.MakePlural(tbl.NameHumanCase) #> { get; set; }<#if (Settings.IncludeComments != CommentsStyle.None)
{ #> // <#=tbl.Name #>
<# }
else
{ #>

<# } #>
<# } #>

<#foreach (string s in Settings.AdditionalContextInterfaceItems.Where(x => !string.IsNullOrEmpty(x)))
{ #>
        <#=s #>
<# } #>
        int SaveChanges();
		System.Threading.Tasks.Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
		Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
		Microsoft.EntityFrameworkCore.DbSet<TEntity> Set<TEntity>() where TEntity : class;
<# if (Settings.IsSupportedFrameworkVersion("4.5")) { #>
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
<# } #>
        string ToString();
<# if (Settings.StoredProcs.Any()) { #>

        // Stored Procedures
<#      // Interface
foreach (StoredProcedure sp in Settings.StoredProcs.Where(s => !s.IsTVF))
{
    int returnModelsCount = sp.ReturnModels.Count;
    if (returnModelsCount == 1)
    { #>
        <#=WriteStoredProcReturnType(sp) #> <#=WriteStoredProcFunctionName(sp)#>(<#=WriteStoredProcFunctionParams(sp, false) #>);
<#  } else { #>
        <#=WriteStoredProcReturnType(sp) #> <#=WriteStoredProcFunctionName(sp)#>(<#=WriteStoredProcFunctionParams(sp, false) #>);
<#  }
    if (Settings.IsSupportedFrameworkVersion("4.5"))
    {
        if(StoredProcHasOutParams(sp) || sp.ReturnModels.Count == 0) { #>
        // <#=WriteStoredProcFunctionName(sp)#>Async cannot be created due to having out parameters, or is relying on the procedure result (<#=WriteStoredProcReturnType(sp)#>)
<# } else { #>
        System.Threading.Tasks.Task<<#=WriteStoredProcReturnType(sp)#>> <#=WriteStoredProcFunctionName(sp)#>Async(<#=WriteStoredProcFunctionParams(sp, false) #>);
<# } #>
<# } #>

<#
}

if (Settings.IncludeTableValuedFunctions)
{ #>

        // Table Valued Functions
<#      foreach (StoredProcedure sp in Settings.StoredProcs.Where(s => s.IsTVF))
        {
            string spExecName = WriteStoredProcFunctionName(sp);
            string spReturnClassName = WriteStoredProcReturnModelName(sp);
#>
        System.Linq.IQueryable<<#= spReturnClassName #>> <#= spExecName #>(<#=WriteStoredProcFunctionParams(sp, false)#>);
<#
    }
}
#>
<# /**/} #>
    }

<# }
 if(!string.IsNullOrWhiteSpace(Settings.MigrationConfigurationFileName)) {
       fileManager.StartNewFile(Settings.MigrationConfigurationFileName + Settings.FileExtension);  #>
<# if(!Settings.GenerateSeparateFiles) { #>
    // ************************************************************************
    // Db Migration Configuration
<# } #>
<#if(Settings.IncludeCodeGeneratedAttribute){#>    <#=CodeGeneratedAttribute#>
<#}#>
    internal sealed <# if(Settings.MakeClassesPartial) { #>partial <# } #>class <#=Settings.MigrationConfigurationFileName#> : System.Data.Entity.Migrations.DbMigrationsConfiguration<<#=Settings.DbContextName#>>
    {
        <# if(Settings.MakeClassesInternal) { #>internal<# } else { #>public<# } #> <#=Settings.MigrationConfigurationFileName#>()
        {
            Settings.AutomaticMigrationsEnabled = <# if (Settings.AutomaticMigrationsEnabled) { #>true<# } else { #>false<# } #>;
            Settings.AutomaticMigrationDataLossAllowed = <# if (Settings.AutomaticMigrationDataLossAllowed) { #>true<# } else { #>false<# } #>;
<# if (!string.IsNullOrEmpty(Settings.ContextKey)) { #>
            Settings.ContextKey = "<#= Settings.ContextKey #>";
<# } #>
        }

        //protected override void Seed(<#=Settings.DbContextName#> context)
        //{

            // This method will be called after migrating to the latest version.

            // You can use the DbSet<T>.AddOrUpdate() helper extension method
            // to avoid creating duplicate seed data. E.g.
            //
            //   context.People.AddOrUpdate(
            //     p => p.FullName,
            //     new Person { FullName = "Andrew Peters" },
            //     new Person { FullName = "Brice Lambson" },
            //     new Person { FullName = "Rowan Miller" }
            //   );
            //
        //}
    }

<# }
if(Settings.ElementsToGenerate.HasFlag(Elements.UnitOfWork) && !string.IsNullOrWhiteSpace(Settings.DbContextInterfaceName) && !Settings.GenerateSeparateFiles) { #>
    #endregion

<# }
    if(Settings.ElementsToGenerate.HasFlag(Elements.Context)){
    fileManager.StartNewFile(Settings.DbContextName + Settings.FileExtension); #>
<# if(!Settings.GenerateSeparateFiles) { #>
    #region Database context

<# } else {
foreach(var usingStatement in usingsContext.Distinct().OrderBy(x => x)) { #>
    using <#= usingStatement #>;
<# } #>

<# } #>
<#if(Settings.IncludeCodeGeneratedAttribute){#>    <#=CodeGeneratedAttribute#>
<#}#>
    <# if(Settings.MakeClassesInternal) { #>internal<# } else { #>public<# } #> <# if(Settings.MakeClassesPartial) { #>partial <# } #>class <#=Settings.DbContextName#> : <#=Settings.DbContextBaseClass#><#= (string.IsNullOrWhiteSpace(Settings.DbContextInterfaceName) ? "" : ", " + Settings.DbContextInterfaceName)#>
    {
		public ApplicationContext ApplicationContext { get; private set; }
<#
foreach(Table tbl in from t in Settings.Tables.Where(t => !t.IsMapping && t.HasPrimaryKey).OrderBy(x => x.NameHumanCase) select t)
{
#>
        public Microsoft.EntityFrameworkCore.DbSet<<#=tbl.NameHumanCaseWithSuffix#>> <#=Inflector.MakePlural(tbl.NameHumanCase)#> { get; set; }<#if(Settings.IncludeComments != CommentsStyle.None){#> // <#=tbl.Name#>
<# } else { #>

<# } #>
<# } #>

        <# if(Settings.MakeClassesInternal) { #>internal<# } else { #>public<# } #> <#=Settings.DbContextName#>(<#=Settings.DefaultConstructorArgument#> options, ApplicationContext applicationContext)
            : base(options)
        {
			this.ApplicationContext = applicationContext;
<#if(Settings.MakeClassesPartial) {#>            InitializePartial();
<#}#>
        }

<#if(!Settings.IsSqlCe){ #>
        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

<#}#>
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

<#
foreach(var tbl in Settings.Tables.Where(t => !t.IsMapping && t.HasPrimaryKey).OrderBy(x => x.NameHumanCase))
{
#>
			modelBuilder.Entity<<#=tbl.NameHumanCaseWithSuffix#>>(entity => 
			{

<#if(!Settings.UseDataAnnotationsSchema){ if (!string.IsNullOrEmpty(tbl.Schema)) { #>
				entity.ToTable("<#=tbl.Name#>", "<#=tbl.Schema#>");
<# } else { #>
				entity.ToTable("<#=tbl.Name#>");
<# }}
if(!Settings.UseDataAnnotations){#>
				
<#foreach(var configFk in tbl.Columns.SelectMany(x => x.ConfigFk).OrderBy(o => o))
{#>
				entity.<#= configFk #>
<#}#>
<# } #>
<#
foreach(var col in tbl.Columns.Where(x => !x.Hidden && !string.IsNullOrEmpty(x.Config)).OrderBy(x => x.Ordinal))
{
#>
				entity.<#=col.Config #>

<# } #>
<# if(tbl.HasForeignKey) { #>

<# } #>
<#
foreach (string s in tbl.MappingConfiguration)
{
#>
				entity.<#=s#>
<# } #>
<#if(Settings.MakeClassesPartial) {#>
				InitializePartial();
<#}#>        
			});

<#
}
#>
<# if(Settings.StoredProcs.Any() && Settings.IncludeTableValuedFunctions)
{ #>

            modelBuilder.Conventions.Add(new CodeFirstStoreFunctions.FunctionsConvention<<#=Settings.DbContextName#>>("dbo"));
<#      foreach (var sp in Settings.StoredProcs.Where(s => s.IsTVF && !Settings.StoredProcedureReturnTypes.ContainsKey(s.NameHumanCase) && !Settings.StoredProcedureReturnTypes.ContainsKey(s.Name))){#>
            modelBuilder.ComplexType<<#=WriteStoredProcReturnModelName(sp)#>>();
<# } } #>

<#
foreach(var tbl in from t in Settings.Tables.Where(t => !t.IsMapping && t.HasPrimaryKey).Where(Settings.ConfigurationFilter).OrderBy(x => x.NameHumanCase) select t)
{
#>
<# } #>
<#if(Settings.MakeClassesPartial) {#>

            OnModelCreatingPartial(modelBuilder);
<#}#>
        }

<#if(Settings.MakeClassesPartial) {#>

        partial void InitializePartial();
        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
<#}#>
<# if (Settings.StoredProcs.Any())
{ #>

        // Stored Procedures
<#      // Database context
foreach (var sp in Settings.StoredProcs.Where(s => !s.IsTVF))
{
    string spReturnClassName = WriteStoredProcReturnModelName(sp);
    string spExecName = WriteStoredProcFunctionName(sp);
    int returnModelsCount = sp.ReturnModels.Count;
    if (returnModelsCount > 0)
    {
        if (returnModelsCount == 1)
        { #>
        public <#=WriteStoredProcReturnType(sp) #> <#=WriteStoredProcFunctionName(sp) #>(<#=WriteStoredProcFunctionParams(sp, false) #>)
        {
            var activeTransaction = TransactionCoordinator.GetActiveTransaction(this.ApplicationContext.CorrelationId);

			<#=WriteStoredProcReturnType(sp) #> result = new <#=WriteStoredProcReturnType(sp) #>();

			this.LoadStoredProc("<#= sp.Name #>")<#= WriteWithSqlParam(sp) #>.ExecuteStoredProc(activeTransaction, handler =>
            {
                result = handler.ReadToList<<#= WriteStoredProcReturnModelName(sp) #>>().ToList();
            });

			return result;
        }

<#      } #>
        

<# }
        else
            { #>
        public int <#= spExecName #>(<#=WriteStoredProcFunctionParams(sp, true) #>)
        {
<#= WriteStoredProcFunctionDeclareSqlParameter(sp, true) #>
            Database.ExecuteSqlCommand("EXEC @procResult = [<#=sp.Schema #>].[<#= sp.Name #>] <#= WriteStoredProcFunctionSqlAtParams(sp) #>", <#= WriteStoredProcFunctionSqlParameterAnonymousArray(sp, true) #>);
<#= WriteStoredProcFunctionSetSqlParameters(sp, false) #>
            return (int) procResultParam.Value;
        }

<# }
    // Async
    if (Settings.IsSupportedFrameworkVersion("4.5") && !StoredProcHasOutParams(sp) && returnModelsCount > 0)
    {#>
        public async System.Threading.Tasks.Task<<#=WriteStoredProcReturnType(sp) #>> <#=WriteStoredProcFunctionName(sp) #>Async(<#=WriteStoredProcFunctionParams(sp, false) #>)
        {
			var activeTransaction = TransactionCoordinator.GetActiveTransaction(this.ApplicationContext.CorrelationId);

			<#=WriteStoredProcReturnType(sp) #> result = new <#=WriteStoredProcReturnType(sp) #>();

			await this.LoadStoredProc("<#= sp.Name #>")<#= WriteWithSqlParam(sp) #>.ExecuteStoredProcAsync(activeTransaction, handler =>
            {
                result = handler.ReadToList<<#= WriteStoredProcReturnModelName(sp) #>>().ToList();
            });

			return result;
        }

<# }
}
if (Settings.IncludeTableValuedFunctions)
{ #>
        // Table Valued Functions
<#
        foreach (var sp in Settings.StoredProcs.Where(s => s.IsTVF))
        {
            string spExecName = WriteStoredProcFunctionName(sp);
            string spReturnClassName = WriteStoredProcReturnModelName(sp);
#>
        [System.Data.Entity.DbFunction("<#=Settings.DbContextName#>", "<#=sp.Name#>")]
        [CodeFirstStoreFunctions.DbFunctionDetails(DatabaseSchema = "<#=sp.Schema#>"<#if (sp.ReturnModels.Count == 1 && sp.ReturnModels[0].Count == 1) {#>, ResultColumnName = "<#=sp.ReturnModels[0][0].ColumnName#>"<#}#>)]
        public IQueryable<<#= spReturnClassName #>> <#= spExecName #>(<#=WriteStoredProcFunctionParams(sp, false)#>)
        {
<#= WriteTableValuedFunctionDeclareSqlParameter(sp) #>
            return ((System.Data.Entity.Infrastructure.IObjectContextAdapter)this).ObjectContext.CreateQuery<<#=spReturnClassName#>>("[<#=Settings.DbContextName#>].[<#=sp.Name#>](<#= WriteStoredProcFunctionSqlAtParams(sp) #>)", <#= WriteTableValuedFunctionSqlParameterAnonymousArray(sp) #>);
        }

<# } } }
/**/#>    }
<# }
if(Settings.ElementsToGenerate.HasFlag(Elements.Context) && !Settings.GenerateSeparateFiles) { #>
    #endregion

<# }
    if (Settings.ElementsToGenerate.HasFlag(Elements.Context) && Settings.AddIDbContextFactory)
    {
        fileManager.StartNewFile(Settings.DbContextName + "Factory" + Settings.FileExtension); #>
<# if (!Settings.GenerateSeparateFiles)
{ #>
    #region Database context factory

<# } #>
    <# if(Settings.MakeClassesInternal) { #>internal<# } else { #>public<# } #> class <#= Settings.DbContextName + "Factory" #> : System.Data.Entity.Infrastructure.IDbContextFactory<<#= Settings.DbContextName #>>
    {
        public <#= Settings.DbContextName #> Create()
        {
            return new <#= Settings.DbContextName #>();
        }
    }
<# if(!Settings.GenerateSeparateFiles) { #>

    #endregion

<# } #>
<# }
    if (Settings.ElementsToGenerate.HasFlag(Elements.Context) && Settings.AddUnitTestingDbContext)
    {
        fileManager.StartNewFile("Fake" + Settings.DbContextName + Settings.FileExtension); #>
<# if (!Settings.GenerateSeparateFiles)
{ #>
    #region Fake Database context

<# } else {
foreach(var usingStatement in usingsContext.Distinct().OrderBy(x => x)) { #>
    using <#= usingStatement #>;
<# } #>

<# } #>
<#if(Settings.IncludeCodeGeneratedAttribute){#>    <#=CodeGeneratedAttribute#>
<#}#>
    <# if(Settings.MakeClassesInternal) { #>internal<# } else { #>public<# } #> <# if(Settings.MakeClassesPartial) { #>partial <# } #>class Fake<#=Settings.DbContextName #><#= (string.IsNullOrWhiteSpace(Settings.DbContextInterfaceName) ? "" : " : " + Settings.DbContextInterfaceName)#>
    {
<#
foreach (var tbl in from t in Settings.Tables.Where(t => !t.IsMapping && t.HasPrimaryKey).OrderBy(x => x.NameHumanCase) select t)
{
#>
        public Microsoft.EntityFrameworkCore.DbSet<<#=tbl.NameHumanCaseWithSuffix #>> <#=Inflector.MakePlural(tbl.NameHumanCase) #> { get; set; }
<# } #>

        public Fake<#=Settings.DbContextName #>()
        {
<#
foreach (Table tbl in from t in Settings.Tables.Where(t => !t.IsMapping && t.HasPrimaryKey).OrderBy(x => x.NameHumanCase) select t)
{
#>
            <#=Inflector.MakePlural(tbl.NameHumanCase) #> = new FakeDbSet<<#=tbl.NameHumanCaseWithSuffix #>>(<#= string.Join(", ", tbl.PrimaryKeys.Select(x => "\"" + x.NameHumanCase + "\"")) #>);
<# } #>
<#if(Settings.MakeClassesPartial) {#>

            InitializePartial();
<#}#>        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }
<# if (Settings.IsSupportedFrameworkVersion("4.5")) { #>

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }
<# } #>
<#if(Settings.MakeClassesPartial) {#>

        partial void InitializePartial();
<#}#>

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        private System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }

<# if (Settings.StoredProcs.Any())
{ #>

        // Stored Procedures
<#      // Fake
foreach (StoredProcedure sp in Settings.StoredProcs.Where(s => !s.IsTVF))
{
    string spReturnClassName = WriteStoredProcReturnModelName(sp);
    string spExecName = WriteStoredProcFunctionName(sp);
    int returnModelsCount = sp.ReturnModels.Count;
    if (returnModelsCount > 0)
    { #>
        public <#=WriteStoredProcReturnType(sp) #> <#=WriteStoredProcFunctionName(sp) #>(<#=WriteStoredProcFunctionParams(sp, false) #>)
        {
            int procResult;
            return <#= spExecName #>(<#=WriteStoredProcFunctionOverloadCall(sp) #>);
        }

        public <#=WriteStoredProcReturnType(sp) #> <#=WriteStoredProcFunctionName(sp) #>(<#=WriteStoredProcFunctionParams(sp, true) #>)
        {
<#= WriteStoredProcFunctionSetSqlParameters(sp, true) #>
            procResult = 0;
            return new <#=WriteStoredProcReturnType(sp) #>();
        }
<# if (Settings.IsSupportedFrameworkVersion("4.5") && !StoredProcHasOutParams(sp) && returnModelsCount > 0) { #>

        public System.Threading.Tasks.Task<<#=WriteStoredProcReturnType(sp)#>> <#=WriteStoredProcFunctionName(sp) #>Async(<#=WriteStoredProcFunctionParams(sp, false) #>)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(<#= spExecName #>(<#=WriteStoredProcFunctionOverloadCall(sp) #>));
        }
<# } #>

<#  } else { #>
        public int <#= spExecName #>(<#=WriteStoredProcFunctionParams(sp, true)#>)
        {
<#= WriteStoredProcFunctionSetSqlParameters(sp, true) #>
            return 0;
        }
<# if (Settings.IsSupportedFrameworkVersion("4.5") && !StoredProcHasOutParams(sp) && returnModelsCount > 0) { #>

        public System.Threading.Tasks.Task<int> <#= spExecName #>Async(<#=WriteStoredProcFunctionParams(sp, false)#>)
        {
<#= WriteStoredProcFunctionSetSqlParameters(sp, true) #>
            return System.Threading.Tasks.Task.FromResult(0);
        }
<# } #>

<# }}
if (Settings.IncludeTableValuedFunctions)
{ #>
        // Table Valued Functions
<#
    foreach (StoredProcedure spTvf in Settings.StoredProcs.Where(s => s.IsTVF))
    {
        string spExecNamespTvf = WriteStoredProcFunctionName(spTvf);
        string spReturnClassName = WriteStoredProcReturnModelName(spTvf);
#>
        [System.Data.Entity.DbFunction("<#=Settings.DbContextName#>", "<#=spTvf.Name#>")]
        public IQueryable<<#= spReturnClassName #>> <#= spExecNamespTvf #>(<#=WriteStoredProcFunctionParams(spTvf, false)#>)
        {
            return new System.Collections.Generic.List<<#= spReturnClassName #>>().AsQueryable();
        }

<#
    }
}
}/**/#>
    }
<#fileManager.StartNewFile("FakeDbSet" + Settings.FileExtension); #>
<# if(Settings.GenerateSeparateFiles) { #>
    using System.Linq;
<# } #>

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
<#if(Settings.IncludeCodeGeneratedAttribute){#>    <#=CodeGeneratedAttribute#>
<#}#>
    <# if(Settings.MakeClassesInternal) { #>internal<# } else { #>public<# } #> <# if(Settings.MakeClassesPartial) { #>partial <# } #>class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity><# if (Settings.IsSupportedFrameworkVersion("4.5")) { #>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity><# } #> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
<#if(Settings.MakeClassesPartial) {#>

            InitializePartial();
<#}#>        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
<#if(Settings.MakeClassesPartial) {#>

            InitializePartial();
<#}#>        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }
<# if (Settings.IsSupportedFrameworkVersion("4.5")) { #>

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }
<#}#>

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
<# if (Settings.IsSupportedFrameworkVersion("4.5")) { #>
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
<# } else { #>
            get { return _query.Provider; }
<# } #>
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }
<# if (Settings.IsSupportedFrameworkVersion("4.5")) { #>

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
<# } #>
<#if(Settings.MakeClassesPartial) {#>

        partial void InitializePartial();
<#}#>    }
<# if (Settings.IsSupportedFrameworkVersion("4.5"))
{ #>

<#if(Settings.IncludeCodeGeneratedAttribute){#>    <#=CodeGeneratedAttribute#>
<#}#>
    <# if(Settings.MakeClassesInternal) { #>internal<# } else { #>public<# } #> class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TElement>(expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

<#if(Settings.IncludeCodeGeneratedAttribute){#>    <#=CodeGeneratedAttribute#>
<#}#>
    <# if(Settings.MakeClassesInternal) { #>internal<# } else { #>public<# } #> class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

<#if(Settings.IncludeCodeGeneratedAttribute){#>    <#=CodeGeneratedAttribute#>
<#}#>
    <# if(Settings.MakeClassesInternal) { #>internal<# } else { #>public<# } #> class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }
<# } #>
<# }
 if(Settings.ElementsToGenerate.HasFlag(Elements.Context) && Settings.AddUnitTestingDbContext && !Settings.GenerateSeparateFiles) { #>

    #endregion

<# }
 if(Settings.ElementsToGenerate.HasFlag(Elements.Poco)){
 entityFileManager.StartNewFile(Settings.EntityFileName ?? "Entities.cs", Settings.EntityProjectName, Settings.EntityProjectSubFolderName);
 
 var entityDependencies = new List<string>();
 entityDependencies.AddRange(Settings.EntityDependencies.Where(x => !string.IsNullOrEmpty(x)));
 foreach(var entityDependency in entityDependencies.Distinct().OrderBy(x => x)) {
#>
using <#= entityDependency #>;
<# } #>

namespace <#= Settings.EntityNamespace #>
{
<#
foreach(Table tbl in from t in Settings.Tables.Where(t => !t.IsMapping).OrderBy(x => x.NameHumanCase) select t)
{
#>

<# 
if(!tbl.HasPrimaryKey) { #>
    // The table '<#=tbl.Name#>' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
<# } #>
<#if(Settings.IncludeComments != CommentsStyle.None){#>    // <#=tbl.Name#>
<# } #>
<# WritePocoClassExtendedComments(tbl);
    WritePocoClassAttributes(tbl);#>
<#if(Settings.IncludeCodeGeneratedAttribute){#>    <#=CodeGeneratedAttribute#>
<#}#>
    <# if(Settings.MakeClassesInternal) { #>internal<# } else { #>public<# } #> <# if(Settings.MakeClassesPartial) { #>partial <# } #>class <#=tbl.NameHumanCaseWithSuffix#><#=WritePocoBaseClasses != null ? WritePocoBaseClasses(tbl) : "" #>
    {
<# WritePocoBaseClassBody(tbl); #>
<# foreach(Column col in tbl.Columns.OrderBy(x => x.Ordinal).Where(x => !x.Hidden))
{
#>
<#= WritePocoColumn(col) #>
<# } #>
<#
if(tbl.ReverseNavigationProperty.Count() > 0)
{
#>

<#if(Settings.IncludeComments != CommentsStyle.None){#>        // Reverse navigation

<# } #>
<#
foreach(var s in tbl.ReverseNavigationProperty.OrderBy(x => x.Definition))
{ #>
<# if(Settings.IncludeComments != CommentsStyle.None){#>        /// <summary>
        /// <#=s.Comments ?? "" #>
        /// </summary>
<# }
   foreach (var rnpda in Settings.AdditionalReverseNavigationsDataAnnotations) {#>
        [<#=rnpda #>]
<# }
   if (s.AdditionalDataAnnotations != null) {
     foreach (var fkda in s.AdditionalDataAnnotations) {#>
        [<#=fkda #>]
<#   }
   } #>
        <#=s.Definition #>
<# } } #>
<# if(tbl.HasForeignKey) { #>

<#if(Settings.IncludeComments != CommentsStyle.None && tbl.Columns.SelectMany(x => x.EntityFk).Any()){#>        // Foreign keys
<# } #>
<#
foreach(var entityFk in tbl.Columns.SelectMany(x => x.EntityFk).OrderBy(o => o.Definition))
{ #>

<# if(Settings.IncludeComments != CommentsStyle.None){#>        /// <summary>
        /// <#=entityFk.Comments #>
        /// </summary>
<# }
   foreach (var fkda in Settings.AdditionalForeignKeysDataAnnotations) {#>
        [<#=fkda #>]
<# }
   if (entityFk.AdditionalDataAnnotations != null) {
     foreach (var fkda in entityFk.AdditionalDataAnnotations) {#>
        [<#=fkda #>]
<#   }
   } #>
        <#=entityFk.Definition #>
<# } } #>
<#
if (!Settings.UsePropertyInitializers){
if(tbl.Columns.Where(c => c.Default != string.Empty && !c.Hidden).Count() > 0 || tbl.ReverseNavigationCtor.Count() > 0 || Settings.MakeClassesPartial)
{
#>

        public <#=tbl.NameHumanCaseWithSuffix#>()
        {
<#
foreach(var col in tbl.Columns.OrderBy(x => x.Ordinal).Where(c => c.Default != string.Empty && !c.Hidden))
{
#>
            <#=col.NameHumanCase #> = <#=col.Default #>;
<# } #>
<#
foreach(string s in tbl.ReverseNavigationCtor)
{
#>
            <#=s #>
<# }
if(Settings.MakeClassesPartial) {#>
            InitializePartial();
<#}#>        }
<#if(Settings.MakeClassesPartial) {#>

        partial void InitializePartial();
<#} }
}#>
    }
<# } #>
}
<# 
 } #>

<# 
if(Settings.StoredProcs.Any() && Settings.ElementsToGenerate.HasFlag(Elements.Poco)){
if(!Settings.GenerateSeparateFiles) { #>
    #region Stored procedure return models

<# } #>
<#
foreach(var sp in Settings.StoredProcs.Where(x => x.ReturnModels.Count > 0 && x.ReturnModels.Any(returnColumns => returnColumns.Any()) && !Settings.StoredProcedureReturnTypes.ContainsKey(x.NameHumanCase) && !Settings.StoredProcedureReturnTypes.ContainsKey(x.Name)))
{
    string spReturnClassName = WriteStoredProcReturnModelName(sp);
#>
<# fileManager.StartNewFile(spReturnClassName + Settings.FileExtension);#>
<#if(Settings.IncludeCodeGeneratedAttribute){#>    <#=CodeGeneratedAttribute#>
<#}#>
    public <# if(Settings.MakeClassesPartial) { #>partial <# } #>class <#= spReturnClassName #>
    {
<#
var returnModelCount = sp.ReturnModels.Count;
if(returnModelCount < 2)
{
    foreach (var returnColumn in sp.ReturnModels.First())
    { #>
        <#= WriteStoredProcReturnColumn(returnColumn) #>
<#  }
} else {
    int model = 0;
    foreach (var returnModel in sp.ReturnModels)
    {
        model++;#>
        public class ResultSetModel<#= model #>
        {
<#      foreach (var returnColumn in returnModel)
        { #>
            <#= WriteStoredProcReturnColumn(returnColumn) #>
<#      }#>
        }
        public System.Collections.Generic.List<ResultSetModel<#= model #>> ResultSet<#= model #>;

<#  } #>
<# } #>
    }

<# }
if(Settings.StoredProcs.Any() && Settings.ElementsToGenerate.HasFlag(Elements.Poco) && !Settings.GenerateSeparateFiles) { #>
    #endregion

<# 
 } }  entityFileManager.Process(); #>
<# fileManager.StartFooter(); #>
}
// </auto-generated>
<# fileManager.EndBlock();
if(Settings.GenerateSeparateFiles)
    fileManager.Process(); #>
