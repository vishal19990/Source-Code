function Peer(e, r, n, t, o, i) { var a = new RTCPeerConnection(e); function s(e) { var r = ["Bytes", "KB", "MB", "GB", "TB"]; if (e <= 0) return "0 Bytes"; var n = parseInt(Math.floor(Math.log(e) / Math.log(1e3)), 10); return r[n] ? (e / Math.pow(1e3, n)).toPrecision(3) + " " + r[n] : "0 Bytes" } a.id = r, null != i && i.enabled && getStats(a, function (e) { i.onStats(function (e, r, n) { if (1 === n) { -1 !== r.connectionType.remote.candidateType.indexOf("relayed") ? r.connectionType.remote.candidateType = "TURN" : r.connectionType.remote.candidateType = "STUN"; var t = {}; return t.remoteIceType = r.connectionType.remote.candidateType, t.externalIPAddressRemote = r.connectionType.remote.ipAddress.join(", "), t.remoteTransport = r.connectionType.remote.transport.join(", "), -1 !== r.connectionType.local.candidateType.indexOf("relayed") ? r.connectionType.local.candidateType = "TURN" : r.connectionType.local.candidateType = "STUN", t.ocalIceType = r.connectionType.local.candidateType, t.externalIPAddressLocal = r.connectionType.local.ipAddress.join(", "), t.localTransport = r.connectionType.local.transport.join(", "), t.encryptedAs = r.encryption, t.videoResolutionsForSenders = r.resolutions.send.width + "x" + r.resolutions.send.height, t.videoResolutionsForReceivers = r.resolutions.recv.width + "x" + r.resolutions.recv.height, t.totalDataForSenders = s(r.audio.bytesSent + r.video.bytesSent), t.totalDataForReceivers = s(r.audio.bytesReceived + r.video.bytesReceived), t.codecsSend = r.audio.send.codecs.concat(r.video.send.codecs).join(", "), t.codecsRecv = r.audio.recv.codecs.concat(r.video.recv.codecs).join(", "), t.bandwidthSpeed = s(r.bandwidth.speed), !0 === r.ended && r.nomore(), t } return r }(0, e, i.level)) }, i.interval), a.onnegotiationneeded = o, a.ontrack = function (e) { let { transceiver: r, streams: [n] } = e, o = null; a.getTransceivers().forEach(e => { e.mid == r.mid && (o = e) }), t(a.id, o, n) }, a.onicecandidate = function (e) { if (e.candidate) { var r = { sdpMLineIndex: e.candidate.sdpMLineIndex, sdpMid: e.candidate.sdpMid, candidate: e.candidate.candidate }, t = JSON.stringify(r); n(t) } }, this.close = function () { a.close() }, this.addLocalStream = function (e, r, n = null) { var t = e; e.pc = e.pc || {}, e.pc[a.id] = e.pc[a.id] || {}, e.pc[a.id].transceivers = e.pc[a.id].transceivers || [], t.getTracks().forEach(o => { if (r == o.kind || !r) { let r = a.addTransceiver(o, { streams: [t] }); r.mediaName = n, e.pc[a.id].transceivers.push(r) } }) }, this.removeLocalStream = function (e) { e.pc && e.pc[a.id].transceivers.forEach(e => { a.removeTrack(e) }) }, this.removeTrack = function (e) { a.getSenders().forEach(e => { a.removeTrack(e) }), a.getTransceivers().forEach(r => { "sender" == e ? r.direction : "receiver" == e && (r.direction = "senonly") }) }, this.addTrack = function (e, r) { let n = a.getTransceivers(); r && n.every(n => { if (n.sender) { if ("video" == r) return n.sender.replaceTrack(e ? e.getVideoTracks()[0] : null), !1; if ("audio" == r) return n.sender.replaceTrack(e ? e.getAudioTracks()[0] : null), !1 } return !0 }) }, this.isTransceiverExists = function () { return a.getTransceivers().length > 0 }, this.enableDisable = function (e, r) { a.getTransceivers().forEach(n => { e ? n.sender && n.sender.track && n.sender.track.kind == e && (n.sender.track.enabled = r) : n.sender && n.sender.track && (n.sender.track.enabled = r) }) }, this.replaceTrack = function (e, r) { let n = a.getTransceivers(); r ? n.every(n => { if (n.sender && n.sender.track && n.sender.track.kind == r) { if ("video" == r) return n.sender.replaceTrack(e ? e.getVideoTracks()[0] : null), !1; if ("audio" == r) return n.sender.replaceTrack(e ? e.getAudioTracks()[0] : null), !1 } return !0 }) : n.forEach(r => { "video" == r.mediaType ? r.sender.replaceTrack(e.getVideoTracks()[0]) : "audio" == r.mediaType && r.sender.replaceTrack(e.getAudioTracks()[0]) }) }, this.createOffer = function (e, r) { r || (r = { offerToReceiveVideo: !0, offerToReceiveAudio: !0 }), a.createOffer(r).then(r => { a.setLocalDescription(r).then(() => { e(a.id, r.sdp) }) }) }, this.processOfferSdpAndGenerateAnswer = function (e) { var r = $.Deferred(); return e = { sdp: e, type: "offer" }, a.setRemoteDescription(new RTCSessionDescription(e)).then(() => { a.createAnswer().then(e => { a.setLocalDescription(e).then(() => { r.resolve(e.sdp) }) }) }), r }, this.processAnswer = function (e) { return e = { sdp: e, type: "answer" }, a.setRemoteDescription(new RTCSessionDescription(e)) }, this.processICECandidates = function (e) { for (; e.length;) { let r = e.shift(); a.addIceCandidate(new RTCIceCandidate(r)) } } } function PeerManager(e) { var r = {}, n = {}, t = {}; function o(e) { return r => { var t = n[r.currentTarget.id]; t.isDirty && (t.createOffer(e), t.isDirty = !1) } } this.onPeerReady = null, this.init = function (e) { r = e.reduce((e, r) => (e[r.peerId] = r, e), {}) }, this.createOffer = function (e, r) { n[e].createOffer(peerConfig.onOfferCreation, r) }, this.getPeerStates = function () { return r }, this.getPeerState = function (e) { return r[e] }, this.updatePeerState = function (e) { r[e.peerId] = e }, this.addPeer = function (t, i, a) { return n[t] ? (this.updatePeerState(a), !1) : (n[t] = new Peer(e, t, i.onICECandidate, i.onRemoteTrack, o(i.onOfferCreation), i.statsConfig), r[t] = a || {}, !0) }, this.createPeers = function (t) { for (var i = Object.keys(r), a = 0; a < i.length; a++)console.log("Creating Peer for: " + i[a]), n[i[a]] = new Peer(e, i[a], t.onICECandidate, t.onRemoteTrack, o(t.onOfferCreation), t.statsConfig) }, this.closePeer = function (e, r) { console.log("Closing peer: " + e); var t = n[e]; if (t && (t.close(), delete n[e]), r) for (var o in r) r[o].pc && delete r[o].pc[e] }, this.removePeer = function (e) { console.log("Removing peer: " + e); var t = n[e]; t && (t.close(), delete n[e]), delete r[e] }, this.addLocalStreamToAllPeers = function (e) { for (var r in n) { console.log("Adding local stream to: " + r); var t = n[r]; t.addLocalStream(e), t.isDirty = !0 } }, this.addLocalStreamToPeer = function (e, r, t, o, i) { if (r) console.log("Adding local stream to: " + r), n[r].addLocalStream(e, o, i), n[r].isDirty = t; else for (var a in n) { console.log("Adding local stream to: " + a); var s = n[a]; s.addLocalStream(e, o, i), s.isDirty = t } }, this.removeLocalStreamFromPeer = function (e, r, t) { if (r) console.log("Removing local stream from: " + r), n[r].removeLocalStream(e); else for (var o in n) { console.log("Removing local stream from: " + o); var i = n[o]; i.removeLocalStream(e), i.isDirty = t } }, this.replaceTrack = function (e, r, t) { if (t) n[t].replaceTrack(e, r); else for (var o in n) { console.log("Replacing streams for: " + o); var i = n[o]; i.replaceTrack(e, r), i.isDirty = !0 } }, this.enableDisable = function (e, r, t) { if (r) n[r].enableDisable(e, t); else for (var o in n) { console.log("Enable/Disable streams for: " + o), n[o].enableDisable(e, t) } }, this.removeTrack = function (e) { e && n[e] && n[e].removeTrack("sender") }, this.removeMediaByName = function (e, r) { var n = e.filter(e => e.mediaName == r); n && n[0].sender.replaceTrack(null) }, this.replaceMediaByName = function (e, r, n) { var t = r.filter(e => e.mediaName == n); t && t[0].sender.replaceTrack(e.getVideoTracks()[0]) }, this.isTransceiverExists = function (e) { if (n[e]) return n[e].isTransceiverExists() }, this.addLocalTrack = function (e, r, t) { t && n[t].addTrack(e, r) }, this.processOfferSdpAndGenerateAnswer = function (e, r) { return console.log("Processing offer of: " + e), n[e].processOfferSdpAndGenerateAnswer(r) }, this.processAnswer = function (e, r) { return console.log("Processing answer of: " + e), n[e].processAnswer(r) }, this.queueICECandidate = function (e, n) { console.log("Queuing remote ICE of: " + e), t[e] || (t[e] = []), n = JSON.parse(n), t[e].push(n); var o = r[e]; o && o.iceCandidatesProcessed && this.processICECandidates(e) }, this.processICECandidates = function (e) { if (n[e]) { console.log("Processing ICE candidates of: " + e); var o = t[e]; o && n[e].processICECandidates(o), this.onPeerReady && this.onPeerReady(r[e]), r[e].iceCandidatesProcessed = !0 } } }